#!/usr/bin/env node
//https://www.arduinoslovakia.eu/blog/2017/5/komunikacia-medzi-arduinom-a-nodejs-pomocou-serioveho-portu?lang=en
/**
 * Module dependencies.
 */
//https://github.com/FaztWeb/node-arduino-serialport.git
//https://www.youtube.com/watch?v=ogzvDX9npC0
//instalar node https://nodejs.org/es/download/package-manager/
//npm install
//npm install express
//npm install serialport
//npm install http
//npm install socket.io
//npm i jquery

//para ejecutar npm start   o npm server
//libreri serialport https://www.npmjs.com/package/serialport#raspberry-pi-linux


//otro ex analogo https://github.com/indiejoseph/arduino-node.js-serialport-socket.io

/* iniciar node.js modules
  npm init
*/

var app = require('../app');
var debug = require('debug')('serialhtml:server');
var http = require('http');
var sck = require('../socket');

/**
 * Get port from environment and store in Express.
 */
var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */
var server = http.createServer(app);
sck.connectSocket(server);

/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
